// myfunctions.cpp
#include <iostream>
#include "my_functions.h"

// ==================== CLASS METHODS/DECLARATIONS ====================

Complex::Complex()
{
    real = imag = magnitude =  0;
}

Complex::Complex(Float_t re, Float_t im)
{
    real = re;
    imag = im;
    magnitude = TMath::Sqrt(re*re + im*im);
}

Float_t Complex::GetReal() const
{
    return real;
}

Float_t Complex::GetImag() const
{
    return imag;
}

Float_t Complex::GetMagnitude() const
{
    return magnitude;
}

void Complex::set_mag()
{
    magnitude = TMath::Sqrt(real*real + imag*imag);
}

Complex Complex::operator+(const Complex & c) const
{
    Complex sum;
    sum.real = real + c.real;
    sum.imag = imag + c.imag;
    sum.set_mag();
    return sum;
}

Complex Complex::operator-(const Complex & c) const
{
    Complex diff;
    diff.real = real - c.real;
    diff.imag = imag - c.imag;
    diff.set_mag();
    return diff;
}

Complex Complex::operator/(const Complex & c) const
{
    Complex result;
    result.real = (real*c.real + imag*c.imag) / (c.real*c.real + c.imag*c.imag);
    result.imag = (imag*c.real - real*c.imag) / (c.real*c.real + c.imag*c.imag);
    result.set_mag();
    return result;
}

// ==================== INDEPENDENT FUNCTIONS =========================

// puts file reader at beginning of desired line
std::fstream& GotoLine(std::fstream& file, int num)
{
    file.seekg(std::ios::beg);
    for(int i=0; i < num - 1; ++i)
    {
            file.ignore(std::numeric_limits<std::streamsize>::max(),'\n');
    }
    return file;
}

// pion two point correlation cosh fitter function
Double_t Cosh(Double_t *x, Double_t *par)
{
    Float_t xx = x[0];
    Double_t f = par[0]*TMath::CosH(par[1]*(xx - 28)) + par[2];
    return f;
}

// takes a hist array and averages over n files at specific inputBin
Float_t AverageOverFiles(TH1F** histArray, Int_t inputBin, const Int_t n)
{
    Float_t result(0);
    for (Int_t i = 0; i < n; i++)
    {
        result += histArray[i]->GetBinContent(inputBin);
    }

    return result / (Float_t)n;
}

Float_t ErrorOverFiles(TH1F** histArray, Int_t inputBin, const Int_t n, const Float_t avg)
{
    Float_t result(0), bin_content(0);

    for (Int_t i = 0; i < n; i++)
    {
        bin_content  = histArray[i]->GetBinContent(inputBin);
        result      += TMath::Power(bin_content - avg, 2);
    }

    return TMath::Sqrt(result * Float_t(n-1)/n);
}

